# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
defaults: &defaultDocker
  docker:
      - image: circleci/node:13.8.0
commands:
  destroy_environment:
    steps:
      - run: 
          name: Destroy environment.
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
  print_pipeline_id:
    description: "Print workflow id"
    steps: 
      - run: echo $CIRCLE_WORKFLOW_ID
  print_value:
    description: "simple print param"
    parameters:
      value:
        type: string
        default: "hello"
    steps:
      - run: echo <<parameters.value>>
# Orchestrate or schedule a set of jobs
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          command: |
            aws cloudformation deploy --template-file aws/template.yml --stack-name prod-${CIRCLE_WORKFLOW_ID}
      - run: return 1 #simulate error to check tear down
      - destroy_environment
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          command: |
            aws cloudformation deploy --template-file aws/bucket.yml --stack-name s3-${CIRCLE_WORKFLOW_ID} --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync web s3://"${CIRCLE_WORKFLOW_ID}" --delete #upload files from web and delete any extra in bucket
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum -y install tar gzip
      - run:
          command: |
            pwd
            aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > previous.txt
            ls
      - persist_to_workspace:
          root: ~/project/
          paths:
            - previous.txt
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          command: |
            aws cloudformation deploy \
            --template-file aws/cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
  clean_up_old_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: yum -y install tar gzip
      - attach_workspace:
          at: ~/project/  
      - run: 
          command: |
            echo $(cat previous.txt)
            aws s3 rm "s3://$(cat previous.txt)" --recursive
            aws cloudformation delete-stack --stack-name $(cat previous.txt)
  install_application:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["71:ec:08:3f:12:d7:12:b1:82:1d:26:c6:6e:8d:3f:85"]
      - run:
          name: "install dependencies."
          command: |
            apk add --update ansible # install the dependencies needed for your playbook   
      - run: 
          name: "Configure server"
          command: |
            cd ansible
            ansible-playbook main-remote.yml -i inventory 
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          command: |
            if curl -s --head "ec2-52-12-199-228.us-west-2.compute.amazonaws.com:3000" 
            then
              echo "It worked!"
              return 0
            else
              echo "It failed" 
              return 1
            fi
  print_hello:
    <<: *defaultDocker
    steps:
      - print_value:
          value: "hello"
      - print_pipeline_id
  save_hello_world_output:
    <<: *defaultDocker
    steps:
      - run: echo "hello" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_output_file:
    <<: *defaultDocker
    steps:
      - attach_workspace:
          at: ~/  
      - run: cat ~/output.txt       
  print_world:
    <<: *defaultDocker
    steps:
      - print_value:
          value: "world"
  print_name:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run: 
          name: "echo an env var"
          command: |
            echo $NAME
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - get_last_deployment_id  
      - create_and_deploy_front_end:
          requires: 
            - get_last_deployment_id
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - clean_up_old_frontend:
          requires:
            - promote_to_production
      #- create_infrastructure
      #- install_application
      # smoke_test
      #- print_hello
      #- print_world:
      #    requires:
      #      - print_hello
      #- save_hello_world_output
      #- print_output_file:
      #    requires:
      #      - save_hello_world_output      
      #- print_name
